class Cell:
    def __init__(self, numbers):
        self.numbers = numbers

    def __str__(self):
        return f"{self.numbers}"

    def __add__(self, other):
        print("–ß–∏—Å–ª–æ —è—á–µ–µ–∫ –≤ –æ–±—â–µ–π –∫–ª–µ—Ç–∫–µ:")
        return Cell(self.numbers + other.numbers)

    def __sub__(self, other):
        print("–†–∞–∑–Ω–æ—Å—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —è—á–µ–µ–∫ –≤ –¥–≤—É—Ö –∫–ª–µ—Ç–∫–∞—Ö:")
        return Cell(self.numbers - other.numbers) if self.numbers - other.numbers > 0 \
            else "–Ø—á–µ–µ–∫ –≤ –ø–µ—Ä–≤–æ–π –∫–ª–µ—Ç–∫–µ –º–µ–Ω—å—à–µ –≤—Ç–æ—Ä–æ–π, –≤—ã—á–∏—Ç–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ!"

    def __mul__(self, other):
        print("–ü–µ—Ä–µ–º–Ω–æ–∂–µ–Ω–∏–µ —è—á–µ–µ–∫ –¥–≤—É—Ö –∫–ª–µ—Ç–æ–∫:")
        return Cell(self.numbers * other.numbers)

    def __floordiv__(self, other):
        print("–¶–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ —è—á–µ–µ–∫ –∫–ª–µ—Ç–æ–∫:")
        return Cell(self.numbers // other.numbers)

    def make_order(self, rows):
        return '\n'.join(['ü¶ñ' * rows for _ in range(self.numbers // rows)]) + '\n' + 'üêô' * (self.numbers % rows)


cell_1 = Cell(30)
cell_2 = Cell(15)
print(cell_1 + cell_2)
print(cell_1 - cell_2)
print(cell_1 * cell_2)
print(cell_1 // cell_2)
print(cell_1.make_order(7))
print(cell_2.make_order(6))